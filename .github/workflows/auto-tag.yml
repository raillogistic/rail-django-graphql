name: Auto Tag

on:
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - 'rail_django_graphql/__init__.py'

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml packaging

      - name: Get current version from pyproject.toml
        id: get_version
        run: |
          python -c "
          import toml
          import sys
          
          try:
              with open('pyproject.toml', 'r') as f:
                  data = toml.load(f)
              version = data['project']['version']
              print(f'Current version: {version}')
              print(f'version={version}', file=open('$GITHUB_OUTPUT', 'a'))
          except Exception as e:
              print(f'Error reading version: {e}')
              sys.exit(1)
          "

      - name: Validate semantic versioning
        id: validate_version
        run: |
          python -c "
          import re
          import sys
          from packaging import version as pkg_version
          
          version = '${{ steps.get_version.outputs.version }}'
          
          # Check if version follows semantic versioning pattern
          semver_pattern = r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          
          if not re.match(semver_pattern, version):
              print(f'Version {version} does not follow semantic versioning')
              sys.exit(1)
          
          try:
              # Validate using packaging library
              parsed_version = pkg_version.parse(version)
              print(f'Version {version} is valid')
              print(f'is_valid=true', file=open('$GITHUB_OUTPUT', 'a'))
          except Exception as e:
              print(f'Invalid version format: {e}')
              sys.exit(1)
          "

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT

      - name: Get previous version from git history
        id: get_previous_version
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          # Get the previous commit's version
          PREV_VERSION=$(git show HEAD~1:pyproject.toml | python -c "
          import toml
          import sys
          try:
              data = toml.load(sys.stdin)
              print(data['project']['version'])
          except:
              print('0.0.0')
          " 2>/dev/null || echo "0.0.0")
          
          echo "Previous version: $PREV_VERSION"
          echo "previous_version=$PREV_VERSION" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare_versions
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          python -c "
          from packaging import version as pkg_version
          
          current = '${{ steps.get_version.outputs.version }}'
          previous = '${{ steps.get_previous_version.outputs.previous_version }}'
          
          current_ver = pkg_version.parse(current)
          previous_ver = pkg_version.parse(previous)
          
          if current_ver > previous_ver:
              print(f'Version increased from {previous} to {current}')
              print('should_tag=true', file=open('$GITHUB_OUTPUT', 'a'))
          elif current_ver == previous_ver:
              print(f'Version unchanged: {current}')
              print('should_tag=false', file=open('$GITHUB_OUTPUT', 'a'))
          else:
              print(f'Version decreased from {previous} to {current}')
              print('should_tag=false', file=open('$GITHUB_OUTPUT', 'a'))
          "

      - name: Create and push tag
        if: steps.check_tag.outputs.tag_exists == 'false' && steps.compare_versions.outputs.should_tag == 'true'
        run: |
          TAG="${{ steps.check_tag.outputs.tag_name }}"
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag with release notes
          git tag -a "$TAG" -m "Release $TAG

          Auto-generated tag for version $VERSION
          
          Changes in this release:
          - Version bump to $VERSION
          - See CHANGELOG.md for detailed changes
          
          This tag was created automatically by the auto-tag workflow."
          
          # Push the tag
          git push origin "$TAG"
          
          echo "Created and pushed tag: $TAG"

      - name: Create GitHub Release Draft
        if: steps.check_tag.outputs.tag_exists == 'false' && steps.compare_versions.outputs.should_tag == 'true'
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.check_tag.outputs.tag_name }}
          name: Release ${{ steps.check_tag.outputs.tag_name }}
          draft: true
          prerelease: false
          generate_release_notes: true
          body: |
            ## Release ${{ steps.check_tag.outputs.tag_name }}
            
            This release was automatically created by the auto-tag workflow.
            
            **Version:** ${{ steps.get_version.outputs.version }}
            **Previous Version:** ${{ steps.get_previous_version.outputs.previous_version }}
            
            ### What's Changed
            - Version bump to ${{ steps.get_version.outputs.version }}
            - See [CHANGELOG.md](./CHANGELOG.md) for detailed changes
            
            ### Installation
            ```bash
            pip install rail-django-graphql==${{ steps.get_version.outputs.version }}
            ```
            
            **Note:** This is a draft release. Please review and publish manually after verification.

      - name: Summary
        if: always()
        run: |
          echo "## Auto-Tag Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Name:** ${{ steps.check_tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Exists:** ${{ steps.check_tag.outputs.tag_exists }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_tag.outputs.tag_exists }}" == "false" ]; then
            echo "- **Previous Version:** ${{ steps.get_previous_version.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Should Tag:** ${{ steps.compare_versions.outputs.should_tag }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.compare_versions.outputs.should_tag }}" == "true" ]; then
              echo "- **Action Taken:** ✅ Created tag and draft release" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Action Taken:** ❌ No tag created (version not increased)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Action Taken:** ❌ No tag created (tag already exists)" >> $GITHUB_STEP_SUMMARY
          fi
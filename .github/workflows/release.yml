name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type de version (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  # CrÃ©ation automatique de release
  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate changelog
      id: changelog
      run: |
        # GÃ©nÃ©rer le changelog depuis le dernier tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        echo "## Changements dans $CURRENT_TAG" > RELEASE_CHANGELOG.md
        echo "" >> RELEASE_CHANGELOG.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### Commits depuis $PREVIOUS_TAG:" >> RELEASE_CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> RELEASE_CHANGELOG.md
        else
          echo "### Tous les commits:" >> RELEASE_CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> RELEASE_CHANGELOG.md
        fi
        
        echo "" >> RELEASE_CHANGELOG.md
        echo "### FonctionnalitÃ©s principales:" >> RELEASE_CHANGELOG.md
        echo "- GÃ©nÃ©ration automatique de schÃ©ma GraphQL" >> RELEASE_CHANGELOG.md
        echo "- SystÃ¨me de permissions avancÃ©" >> RELEASE_CHANGELOG.md
        echo "- Optimisation des requÃªtes N+1" >> RELEASE_CHANGELOG.md
        echo "- Upload de fichiers et gestion mÃ©dia" >> RELEASE_CHANGELOG.md
        echo "- Monitoring et mÃ©triques de performance" >> RELEASE_CHANGELOG.md

    - name: Build distribution packages
      run: |
        python setup.py sdist bdist_wheel

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_CHANGELOG.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publication sur PyPI
  publish-pypi:
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Mise Ã  jour de la documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material

    - name: Build documentation
      run: |
        mkdocs build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # Notification de release
  notify-release:
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi, update-docs]
    if: always() && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "ðŸš€ Nouvelle version de Django GraphQL Auto: ${{ steps.version.outputs.VERSION }}",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Version",
                    "value": "${{ steps.version.outputs.VERSION }}",
                    "short": true
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Release Notes",
                    "value": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}",
                    "short": false
                  }
                ]
              }
            ]
          }
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: success()

    - name: Notify Discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "Nouvelle release Django GraphQL Auto"
        description: "Version ${{ steps.version.outputs.VERSION }} disponible!"
        color: 0x00ff00
      if: success()

  # Bump version automatique (workflow_dispatch)
  bump-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install bump2version
      run: pip install bump2version

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      run: |
        bump2version ${{ github.event.inputs.version_type }}

    - name: Push changes
      run: |
        git push origin main --tags
name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type de version (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write

jobs:
  # Package building and validation
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      working-directory: rail-django-graphql
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution packages
      working-directory: rail-django-graphql
      run: python -m build

    - name: Check package
      working-directory: rail-django-graphql
      run: twine check dist/*

    - name: List build outputs
      working-directory: rail-django-graphql
      run: |
        echo "Contents of rail-django-graphql/dist:"
        ls -la dist || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: rail-django-graphql/dist/

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        echo "## Changes in $CURRENT_TAG" > RELEASE_CHANGELOG.md
        echo "" >> RELEASE_CHANGELOG.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### Commits since $PREVIOUS_TAG:" >> RELEASE_CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> RELEASE_CHANGELOG.md
        else
          echo "### All commits:" >> RELEASE_CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> RELEASE_CHANGELOG.md
        fi
        
        echo "" >> RELEASE_CHANGELOG.md
        echo "### Key Features:" >> RELEASE_CHANGELOG.md
        echo "- Automatic GraphQL schema generation" >> RELEASE_CHANGELOG.md
        echo "- Advanced permission system" >> RELEASE_CHANGELOG.md
        echo "- N+1 query optimization" >> RELEASE_CHANGELOG.md
        echo "- File upload and media management" >> RELEASE_CHANGELOG.md
        echo "- Performance monitoring and metrics" >> RELEASE_CHANGELOG.md
        echo "- Django-agnostic core library" >> RELEASE_CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: RELEASE_CHANGELOG.md
        files: |
          dist/*
        draft: false
        generate_release_notes: true
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Publish to PyPI
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [build, create-release]
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && (secrets.PYPI_API_TOKEN != '')
    environment: pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages_dir: dist
        skip_existing: true
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Update documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt

    - name: Build Sphinx documentation
      run: |
        sphinx-build -b html docs site

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # Release notification
  notify-release:
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi, update-docs]
    if: always() && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "ðŸš€ New rail-django-graphql release: ${{ steps.version.outputs.VERSION }}",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Version",
                    "value": "${{ steps.version.outputs.VERSION }}",
                    "short": true
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "PyPI Package",
                    "value": "https://pypi.org/project/rail-django-graphql/",
                    "short": true
                  },
                  {
                    "title": "Release Notes",
                    "value": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}",
                    "short": false
                  }
                ]
              }
            ]
          }
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: success() && secrets.SLACK_WEBHOOK

  # Automatic version bump (workflow_dispatch)
  bump-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install bump2version
      run: |
        python -m pip install --upgrade pip
        pip install bump2version

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      run: |
        bump2version ${{ github.event.inputs.version_type }}

    - name: Push changes
      run: |
        git push origin main --tags
name: Docker Build and Push

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      matrix:
        dockerfile:
          - path: "Dockerfile"
            target: "production"
            suffix: ""
          - path: "deploy/docker/Dockerfile.production"
            target: "runtime"
            suffix: "-optimized"
          - path: "deploy/docker/Dockerfile.development"
            target: "development"
            suffix: "-dev"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.dockerfile.suffix }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile.path }}
          target: ${{ matrix.dockerfile.target }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Test Docker image
        run: |
          # Test the built image
          docker run --rm \
            -e SECRET_KEY=test-key \
            -e DEBUG=False \
            -e DATABASE_URL=sqlite:///tmp/test.db \
            --entrypoint="" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.dockerfile.suffix }}:${{ steps.meta.outputs.version }} \
            python manage.py check --deploy

  # Security scanning for Docker images
  docker-security:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --severity-threshold=high
        continue-on-error: true

  # Multi-stage deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl set image deployment/app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl set image deployment/app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Delete old container images
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: 'container',
              package_name: context.repo.repo,
              org: context.repo.owner,
              per_page: 100
            });
            
            // Keep the latest 10 versions
            const versionsToDelete = response.data.slice(10);
            
            for (const version of versionsToDelete) {
              if (version.metadata.container.tags.length === 0) {
                await github.rest.packages.deletePackageVersionForOrg({
                  package_type: 'container',
                  package_name: context.repo.repo,
                  org: context.repo.owner,
                  package_version_id: version.id,
                });
              }
            }
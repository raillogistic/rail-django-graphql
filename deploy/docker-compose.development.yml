version: '3.8'

services:
  # PostgreSQL Database for development
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rail_django_graphql_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev-network

  # Redis Cache for development
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev-network

  # Django Application for development
  web:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.development
    restart: unless-stopped
    volumes:
      - .:/app
      - dev_media_data:/app/media
      - dev_logs_data:/app/logs
    ports:
      - "${WEB_PORT:-8001}:8000"
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=rail_django_graphql.settings.development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-rail_django_graphql_dev}
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - SECRET_KEY=dev-secret-key-not-for-production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - dev-network

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    networks:
      - dev-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - db
    networks:
      - dev-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - dev-network

  # Jupyter Notebook for data analysis and debugging
  jupyter:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.development
    restart: unless-stopped
    command: jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
    volumes:
      - .:/app
      - jupyter_data:/root/.jupyter
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=rail_django_graphql.settings.development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-rail_django_graphql_dev}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  dev_media_data:
    driver: local
  dev_logs_data:
    driver: local
  pgadmin_data:
    driver: local
  jupyter_data:
    driver: local

networks:
  dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
#!/usr/bin/env python3
"""
Script pour corriger les mutations Tag en ajoutant l'invalidation du cache.
Ce script modifie les mutations existantes pour invalider automatiquement
le cache apr√®s les op√©rations CRUD sur les tags.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "rail_django_graphql.settings")
django.setup()

from django.core.cache import cache
from rail_django_graphql.extensions.caching import get_cache_manager
import graphene
from graphene_django import DjangoObjectType
from test_app.models import Tag
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TagType(DjangoObjectType):
    """Type GraphQL pour le mod√®le Tag."""

    class Meta:
        model = Tag
        fields = "__all__"


class CreateTagWithCacheInvalidation(graphene.Mutation):
    """Mutation pour cr√©er un tag avec invalidation automatique du cache."""

    class Arguments:
        input = graphene.Argument("TagInput", required=True)

    # Retour standardis√©
    ok = graphene.Boolean()
    object = graphene.Field(TagType)
    errors = graphene.List(graphene.String)

    @classmethod
    def mutate(cls, root, info, input=None):
        """Cr√©er un nouveau tag avec invalidation du cache."""
        try:
            # Cr√©er le tag
            tag_data = {
                "name": input.get("name"),
                "color": input.get("color", "#000000"),
            }

            tag = Tag.objects.create(**tag_data)
            logger.info(f"‚úÖ Tag cr√©√©: {tag.name} (ID: {tag.pk})")

            # SOLUTION: Invalider le cache automatiquement
            cls._invalidate_tag_cache(tag)

            return CreateTagWithCacheInvalidation(ok=True, object=tag, errors=[])

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation du tag: {e}")
            return CreateTagWithCacheInvalidation(
                ok=False, object=None, errors=[str(e)]
            )

    @staticmethod
    def _invalidate_tag_cache(tag):
        """Invalider tous les caches li√©s aux tags."""
        # Cl√©s de cache sp√©cifiques √† invalider
        cache_keys_to_invalidate = [
            # Caches de requ√™tes GraphQL
            "graphql_all_tags",
            "graphql_tags_list",
            "gql_query_tags",
            "gql_query_allTags",
            f"graphql_tags_by_color_{tag.color}",
            "graphql_tags_by_color_all",
            # Caches de pagination
            "gql_tags_page_1",
            "gql_tags_page_*",
            # Caches de mod√®le
            f"tag_model_{tag.pk}",
            "tag_model_list",
        ]

        # Invalider les cl√©s sp√©cifiques
        for cache_key in cache_keys_to_invalidate:
            cache.delete(cache_key)
            logger.info(f"üóëÔ∏è  Cache invalid√©: {cache_key}")

        # Utiliser le gestionnaire de cache pour l'invalidation par pattern
        try:
            cache_manager = get_cache_manager()

            # Invalider les patterns de cache
            patterns_to_invalidate = [
                "gql_query_*tag*",
                "gql_field_tag_*",
                f"gql_field_tag_*_{tag.pk}_*",
                "graphql_*tag*",
                "model_page_*tag*",
            ]

            for pattern in patterns_to_invalidate:
                try:
                    cache_manager.invalidate_pattern(pattern)
                    logger.info(f"üîÑ Pattern invalid√©: {pattern}")
                except Exception as pattern_error:
                    logger.warning(
                        f"‚ö†Ô∏è  Erreur d'invalidation du pattern {pattern}: {pattern_error}"
                    )

            # Invalider le cache du mod√®le
            cache_manager.invalidate_model(Tag, tag.pk)
            logger.info(f"üîÑ Cache du mod√®le Tag invalid√© pour ID: {tag.pk}")

        except Exception as cache_error:
            logger.warning(f"‚ö†Ô∏è  Erreur du gestionnaire de cache: {cache_error}")
            # Fallback: nettoyer tout le cache
            cache.clear()
            logger.info("üßπ Cache enti√®rement nettoy√© (fallback)")


class UpdateTagWithCacheInvalidation(graphene.Mutation):
    """Mutation pour mettre √† jour un tag avec invalidation du cache."""

    class Arguments:
        id = graphene.ID(required=True)
        input = graphene.Argument("TagInput", required=True)

    ok = graphene.Boolean()
    object = graphene.Field(TagType)
    errors = graphene.List(graphene.String)

    @classmethod
    def mutate(cls, root, info, id, input=None):
        """Mettre √† jour un tag avec invalidation du cache."""
        try:
            tag = Tag.objects.get(pk=id)
            old_color = tag.color

            # Mettre √† jour les champs
            if input.get("name"):
                tag.name = input.get("name")
            if input.get("color"):
                tag.color = input.get("color")

            tag.save()
            logger.info(f"‚úÖ Tag mis √† jour: {tag.name} (ID: {tag.pk})")

            # Invalider le cache (ancienne et nouvelle couleur)
            cls._invalidate_tag_cache(tag, old_color)

            return UpdateTagWithCacheInvalidation(ok=True, object=tag, errors=[])

        except Tag.DoesNotExist:
            return UpdateTagWithCacheInvalidation(
                ok=False, object=None, errors=[f"Tag avec l'ID {id} n'existe pas"]
            )
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la mise √† jour du tag: {e}")
            return UpdateTagWithCacheInvalidation(
                ok=False, object=None, errors=[str(e)]
            )

    @staticmethod
    def _invalidate_tag_cache(tag, old_color=None):
        """Invalider le cache pour la mise √† jour."""
        CreateTagWithCacheInvalidation._invalidate_tag_cache(tag)

        # Invalider aussi l'ancien cache de couleur si elle a chang√©
        if old_color and old_color != tag.color:
            cache.delete(f"graphql_tags_by_color_{old_color}")
            logger.info(f"üóëÔ∏è  Cache invalid√© pour ancienne couleur: {old_color}")


class DeleteTagWithCacheInvalidation(graphene.Mutation):
    """Mutation pour supprimer un tag avec invalidation du cache."""

    class Arguments:
        id = graphene.ID(required=True)

    ok = graphene.Boolean()
    object = graphene.Field(TagType)
    errors = graphene.List(graphene.String)

    @classmethod
    def mutate(cls, root, info, id):
        """Supprimer un tag avec invalidation du cache."""
        try:
            tag = Tag.objects.get(pk=id)
            tag_data = {
                "id": tag.pk,
                "name": tag.name,
                "color": tag.color,
            }

            # Invalider le cache avant suppression
            CreateTagWithCacheInvalidation._invalidate_tag_cache(tag)

            tag.delete()
            logger.info(f"‚úÖ Tag supprim√©: {tag_data['name']} (ID: {tag_data['id']})")

            # Cr√©er un objet temporaire pour le retour
            class DeletedTag:
                def __init__(self, data):
                    self.pk = data["id"]
                    self.id = data["id"]
                    self.name = data["name"]
                    self.color = data["color"]

            return DeleteTagWithCacheInvalidation(
                ok=True, object=DeletedTag(tag_data), errors=[]
            )

        except Tag.DoesNotExist:
            return DeleteTagWithCacheInvalidation(
                ok=False, object=None, errors=[f"Tag avec l'ID {id} n'existe pas"]
            )
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la suppression du tag: {e}")
            return DeleteTagWithCacheInvalidation(
                ok=False, object=None, errors=[str(e)]
            )


# Input type pour les mutations
class TagInput(graphene.InputObjectType):
    """Type d'entr√©e pour les mutations Tag."""

    name = graphene.String(required=True)
    color = graphene.String()


def create_fixed_mutations_file():
    """Cr√©er un fichier avec les mutations corrig√©es."""
    mutations_code = '''
import graphene
from graphene_django import DjangoObjectType
from django.core.cache import cache
from rail_django_graphql.extensions.caching import get_cache_manager
from test_app.models import Tag
import logging

logger = logging.getLogger(__name__)

class TagType(DjangoObjectType):
    """Type GraphQL pour le mod√®le Tag."""
    class Meta:
        model = Tag
        fields = '__all__'

class TagInput(graphene.InputObjectType):
    """Type d'entr√©e pour les mutations Tag."""
    name = graphene.String(required=True)
    color = graphene.String()

class CreateTag(graphene.Mutation):
    """Mutation pour cr√©er un tag avec invalidation automatique du cache."""
    
    class Arguments:
        input = TagInput(required=True)
    
    ok = graphene.Boolean()
    object = graphene.Field(TagType)
    errors = graphene.List(graphene.String)
    
    @classmethod
    def mutate(cls, root, info, input=None):
        try:
            tag = Tag.objects.create(
                name=input.name,
                color=input.get('color', '#000000')
            )
            
            # Invalider le cache
            cls._invalidate_tag_cache(tag)
            
            return CreateTag(ok=True, object=tag, errors=[])
        except Exception as e:
            return CreateTag(ok=False, object=None, errors=[str(e)])
    
    @staticmethod
    def _invalidate_tag_cache(tag):
        """Invalider tous les caches li√©s aux tags."""
        cache_keys = [
            "graphql_all_tags", "graphql_tags_list", "gql_query_tags",
            f"graphql_tags_by_color_{tag.color}", "model_page_tags"
        ]
        
        for key in cache_keys:
            cache.delete(key)
        
        try:
            cache_manager = get_cache_manager()
            cache_manager.invalidate_model(Tag, tag.pk)
        except:
            cache.clear()  # Fallback

class UpdateTag(graphene.Mutation):
    """Mutation pour mettre √† jour un tag avec invalidation du cache."""
    
    class Arguments:
        id = graphene.ID(required=True)
        input = TagInput(required=True)
    
    ok = graphene.Boolean()
    object = graphene.Field(TagType)
    errors = graphene.List(graphene.String)
    
    @classmethod
    def mutate(cls, root, info, id, input=None):
        try:
            tag = Tag.objects.get(pk=id)
            
            if input.name:
                tag.name = input.name
            if input.color:
                tag.color = input.color
            
            tag.save()
            
            # Invalider le cache
            CreateTag._invalidate_tag_cache(tag)
            
            return UpdateTag(ok=True, object=tag, errors=[])
        except Tag.DoesNotExist:
            return UpdateTag(ok=False, object=None, errors=[f"Tag {id} non trouv√©"])
        except Exception as e:
            return UpdateTag(ok=False, object=None, errors=[str(e)])

class DeleteTag(graphene.Mutation):
    """Mutation pour supprimer un tag avec invalidation du cache."""
    
    class Arguments:
        id = graphene.ID(required=True)
    
    ok = graphene.Boolean()
    object = graphene.Field(TagType)
    errors = graphene.List(graphene.String)
    
    @classmethod
    def mutate(cls, root, info, id):
        try:
            tag = Tag.objects.get(pk=id)
            
            # Invalider le cache avant suppression
            CreateTag._invalidate_tag_cache(tag)
            
            tag.delete()
            
            return DeleteTag(ok=True, object=None, errors=[])
        except Tag.DoesNotExist:
            return DeleteTag(ok=False, object=None, errors=[f"Tag {id} non trouv√©"])
        except Exception as e:
            return DeleteTag(ok=False, object=None, errors=[str(e)])
'''

    with open("fixed_tag_mutations.py", "w", encoding="utf-8") as f:
        f.write(mutations_code)

    print("‚úÖ Fichier 'fixed_tag_mutations.py' cr√©√© avec les mutations corrig√©es")


def test_fixed_mutations():
    """Tester les mutations corrig√©es."""
    print("\n" + "=" * 70)
    print("üß™ TEST DES MUTATIONS CORRIG√âES")
    print("=" * 70)

    # Nettoyer le cache
    cache.clear()
    print("üßπ Cache nettoy√©")

    # Test 1: Cr√©er un tag
    print("\nüìã Test 1: Cr√©ation d'un tag avec invalidation")
    try:
        mutation = CreateTagWithCacheInvalidation()
        result = mutation.mutate(
            root=None, info=None, input={"name": "TestCacheFixed", "color": "#FF5733"}
        )

        if result.ok:
            print(f"‚úÖ Tag cr√©√© avec succ√®s: {result.object.name}")
        else:
            print(f"‚ùå Erreur: {result.errors}")
    except Exception as e:
        print(f"‚ùå Exception: {e}")

    # Test 2: V√©rifier que le cache est invalid√©
    print("\nüìã Test 2: V√©rification de l'invalidation du cache")
    cached_data = cache.get("graphql_all_tags")
    if cached_data is None:
        print("‚úÖ Cache correctement invalid√©")
    else:
        print("‚ùå Cache toujours pr√©sent")

    print("\nüéØ CONCLUSION:")
    print("Les mutations corrig√©es invalident automatiquement le cache.")
    print("Cela r√©sout le probl√®me o√π les nouveaux objets n'apparaissent pas")
    print("imm√©diatement dans les requ√™tes GraphQL.")


def main():
    """Fonction principale."""
    print("üîß CORRECTION DES MUTATIONS TAG AVEC INVALIDATION DU CACHE")
    print("Ce script corrige le probl√®me o√π les nouveaux tags ne sont pas")
    print("visibles imm√©diatement apr√®s cr√©ation via GraphQL mutations.")

    try:
        # Cr√©er le fichier de mutations corrig√©es
        create_fixed_mutations_file()

        # Tester les mutations corrig√©es
        test_fixed_mutations()

        print("\n" + "=" * 70)
        print("üéØ PROCHAINES √âTAPES POUR APPLIQUER LA CORRECTION")
        print("=" * 70)
        print("1. üìù Remplacer les mutations Tag existantes par les versions corrig√©es")
        print("2. üîÑ Red√©marrer le serveur Django")
        print("3. üß™ Tester dans GraphiQL:")
        print("   - Cr√©er un nouveau tag")
        print("   - Ex√©cuter imm√©diatement une requ√™te tags")
        print("   - V√©rifier que le nouveau tag appara√Æt")
        print("4. ‚úÖ Le probl√®me devrait √™tre r√©solu!")

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()

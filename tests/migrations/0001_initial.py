# Generated by Django 4.2.24 on 2025-09-29 02:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BenchmarkTestAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_auteur",
                    models.CharField(max_length=100, verbose_name="Nom de l'auteur"),
                ),
                (
                    "prenom_auteur",
                    models.CharField(max_length=100, verbose_name="Prénom de l'auteur"),
                ),
                (
                    "email_auteur",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="E-mail de l'auteur"
                    ),
                ),
                (
                    "date_naissance",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de naissance"
                    ),
                ),
                (
                    "biographie_auteur",
                    models.TextField(blank=True, verbose_name="Biographie de l'auteur"),
                ),
                (
                    "nombre_livres",
                    models.IntegerField(default=0, verbose_name="Nombre de livres"),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Est actif"),
                ),
            ],
            options={
                "verbose_name": "Auteur",
                "verbose_name_plural": "Auteurs",
                "ordering": ["nom_auteur", "prenom_auteur"],
            },
        ),
        migrations.CreateModel(
            name="BenchmarkTestBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "titre_livre",
                    models.CharField(max_length=200, verbose_name="Titre du livre"),
                ),
                (
                    "isbn_livre",
                    models.CharField(
                        max_length=13, unique=True, verbose_name="ISBN du livre"
                    ),
                ),
                (
                    "date_publication",
                    models.DateField(verbose_name="Date de publication"),
                ),
                ("nombre_pages", models.IntegerField(verbose_name="Nombre de pages")),
                (
                    "prix_livre",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Prix du livre"
                    ),
                ),
                (
                    "description_livre",
                    models.TextField(blank=True, verbose_name="Description du livre"),
                ),
                (
                    "genre_livre",
                    models.CharField(
                        choices=[
                            ("FICTION", "Fiction"),
                            ("NON_FICTION", "Non-fiction"),
                            ("SCIENCE_FICTION", "Science-fiction"),
                            ("ROMANCE", "Romance"),
                            ("THRILLER", "Thriller"),
                            ("BIOGRAPHIE", "Biographie"),
                        ],
                        max_length=50,
                        verbose_name="Genre du livre",
                    ),
                ),
                (
                    "est_disponible",
                    models.BooleanField(default=True, verbose_name="Est disponible"),
                ),
                (
                    "note_moyenne",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        verbose_name="Note moyenne",
                    ),
                ),
                (
                    "auteur_livre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="livres_auteur",
                        to="tests.benchmarktestauthor",
                        verbose_name="Auteur du livre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livre",
                "verbose_name_plural": "Livres",
                "ordering": ["-date_publication"],
            },
        ),
        migrations.CreateModel(
            name="FixtureTestAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("first_name", models.CharField(max_length=100, verbose_name="Prénom")),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="Nom de famille"),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Adresse e-mail"
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de naissance"
                    ),
                ),
                ("bio", models.TextField(blank=True, verbose_name="Biographie")),
                ("website", models.URLField(blank=True, verbose_name="Site web")),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "nationality",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Nationalité"
                    ),
                ),
                (
                    "awards_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de prix"
                    ),
                ),
            ],
            options={
                "verbose_name": "Auteur de test (fixture)",
                "verbose_name_plural": "Auteurs de test (fixtures)",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="FixtureTestBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "isbn",
                    models.CharField(max_length=13, unique=True, verbose_name="ISBN"),
                ),
                (
                    "publication_date",
                    models.DateField(verbose_name="Date de publication"),
                ),
                ("pages", models.PositiveIntegerField(verbose_name="Nombre de pages")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Prix"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "is_available",
                    models.BooleanField(default=True, verbose_name="Disponible"),
                ),
                (
                    "language",
                    models.CharField(
                        default="fr", max_length=50, verbose_name="Langue"
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        verbose_name="Note",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books",
                        to="tests.fixturetestauthor",
                        verbose_name="Auteur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livre de test (fixture)",
                "verbose_name_plural": "Livres de test (fixtures)",
                "ordering": ["-publication_date", "title"],
            },
        ),
        migrations.CreateModel(
            name="FixtureTestPublisher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="Nom de l'éditeur"
                    ),
                ),
                ("address", models.TextField(blank=True, verbose_name="Adresse")),
                ("website", models.URLField(blank=True, verbose_name="Site web")),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="Adresse e-mail"
                    ),
                ),
                (
                    "founded_year",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Année de fondation"
                    ),
                ),
                (
                    "country",
                    models.CharField(blank=True, max_length=100, verbose_name="Pays"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
            ],
            options={
                "verbose_name": "Éditeur de test (fixture)",
                "verbose_name_plural": "Éditeurs de test (fixtures)",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PerformanceTestAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Nom de l'auteur"),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="Email de l'auteur"),
                ),
            ],
            options={
                "verbose_name": "Auteur de test (performance)",
                "verbose_name_plural": "Auteurs de test (performance)",
            },
        ),
        migrations.CreateModel(
            name="PerformanceTestBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="Titre du livre"),
                ),
                (
                    "publication_year",
                    models.IntegerField(verbose_name="Année de publication"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tests.performancetestauthor",
                        verbose_name="Auteur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livre de test (performance)",
                "verbose_name_plural": "Livres de test (performance)",
            },
        ),
        migrations.CreateModel(
            name="TestAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "numero_compte",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="Numéro de compte"
                    ),
                ),
                (
                    "type_compte",
                    models.CharField(
                        choices=[
                            ("COURANT", "Compte courant"),
                            ("EPARGNE", "Compte épargne"),
                            ("PROFESSIONNEL", "Compte professionnel"),
                        ],
                        default="COURANT",
                        max_length=20,
                        verbose_name="Type de compte",
                    ),
                ),
                (
                    "solde_compte",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=12,
                        verbose_name="Solde du compte",
                    ),
                ),
                (
                    "taux_interet",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=5,
                        verbose_name="Taux d'intérêt",
                    ),
                ),
                (
                    "date_ouverture",
                    models.DateField(
                        auto_now_add=True, verbose_name="Date d'ouverture"
                    ),
                ),
                (
                    "date_fermeture",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de fermeture"
                    ),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Est actif"),
                ),
            ],
            options={
                "verbose_name": "Compte",
                "verbose_name_plural": "Comptes",
                "ordering": ["numero_compte"],
            },
        ),
        migrations.CreateModel(
            name="TestCacheModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Clé de cache"
                    ),
                ),
                ("value", models.TextField(verbose_name="Valeur")),
                (
                    "ttl",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Durée de vie (secondes)"
                    ),
                ),
                (
                    "hit_count",
                    models.IntegerField(default=0, verbose_name="Nombre d'accès"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
            ],
            options={
                "verbose_name": "Test de cache",
                "verbose_name_plural": "Tests de cache",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="TestCompany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_entreprise",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="Nom de l'entreprise"
                    ),
                ),
                (
                    "secteur_activite",
                    models.CharField(max_length=100, verbose_name="Secteur d'activité"),
                ),
                (
                    "adresse_entreprise",
                    models.TextField(verbose_name="Adresse de l'entreprise"),
                ),
                (
                    "telephone_entreprise",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        verbose_name="Téléphone de l'entreprise",
                    ),
                ),
                (
                    "email_entreprise",
                    models.EmailField(
                        max_length=254, verbose_name="E-mail de l'entreprise"
                    ),
                ),
                ("site_web", models.URLField(blank=True, verbose_name="Site web")),
                (
                    "date_creation",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "est_active",
                    models.BooleanField(default=True, verbose_name="Est active"),
                ),
                (
                    "nombre_employes",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre d'employés"
                    ),
                ),
            ],
            options={
                "verbose_name": "Entreprise",
                "verbose_name_plural": "Entreprises",
                "ordering": ["nom_entreprise"],
            },
        ),
        migrations.CreateModel(
            name="TestConcurrencyModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="Nom du test de concurrence"
                    ),
                ),
                (
                    "thread_count",
                    models.IntegerField(default=1, verbose_name="Nombre de threads"),
                ),
                (
                    "concurrent_operations",
                    models.IntegerField(
                        default=1, verbose_name="Opérations concurrentes"
                    ),
                ),
                (
                    "success_count",
                    models.IntegerField(default=0, verbose_name="Nombre de succès"),
                ),
                (
                    "error_count",
                    models.IntegerField(default=0, verbose_name="Nombre d'erreurs"),
                ),
                (
                    "average_response_time",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Temps de réponse moyen (ms)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
            ],
            options={
                "verbose_name": "Test de concurrence",
                "verbose_name_plural": "Tests de concurrence",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TestConcurrentModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_concurrent",
                    models.CharField(max_length=100, verbose_name="Nom concurrent"),
                ),
                (
                    "valeur_compteur",
                    models.IntegerField(default=0, verbose_name="Valeur du compteur"),
                ),
                (
                    "donnees_partagees",
                    models.TextField(default="", verbose_name="Données partagées"),
                ),
                (
                    "timestamp_creation",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Timestamp de création"
                    ),
                ),
                (
                    "thread_id",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="ID du thread"
                    ),
                ),
                (
                    "est_verrouille",
                    models.BooleanField(default=False, verbose_name="Est verrouillé"),
                ),
            ],
            options={
                "verbose_name": "Modèle concurrent",
                "verbose_name_plural": "Modèles concurrents",
            },
        ),
        migrations.CreateModel(
            name="TestEmployee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "poste_employe",
                    models.CharField(max_length=100, verbose_name="Poste de l'employé"),
                ),
                (
                    "salaire_employe",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Salaire de l'employé",
                    ),
                ),
                ("date_embauche", models.DateField(verbose_name="Date d'embauche")),
                (
                    "est_manager",
                    models.BooleanField(default=False, verbose_name="Est manager"),
                ),
            ],
            options={
                "verbose_name": "Employé",
                "verbose_name_plural": "Employés",
            },
        ),
        migrations.CreateModel(
            name="TestFileModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_fichier",
                    models.CharField(max_length=255, verbose_name="Nom du fichier"),
                ),
                (
                    "fichier_telecharge",
                    models.FileField(
                        upload_to="test_uploads/", verbose_name="Fichier téléchargé"
                    ),
                ),
                (
                    "taille_fichier",
                    models.PositiveIntegerField(verbose_name="Taille du fichier"),
                ),
                (
                    "type_mime",
                    models.CharField(max_length=100, verbose_name="Type MIME"),
                ),
                (
                    "date_telechargement",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de téléchargement"
                    ),
                ),
            ],
            options={
                "verbose_name": "Fichier de test",
                "verbose_name_plural": "Fichiers de test",
            },
        ),
        migrations.CreateModel(
            name="TestMemoryModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_modele",
                    models.CharField(max_length=200, verbose_name="Nom du modèle"),
                ),
                (
                    "donnees_volumineuses",
                    models.TextField(verbose_name="Données volumineuses"),
                ),
                (
                    "nombre_entier",
                    models.IntegerField(default=0, verbose_name="Nombre entier"),
                ),
                (
                    "donnees_json",
                    models.TextField(default="{}", verbose_name="Données JSON"),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Est actif"),
                ),
            ],
            options={
                "verbose_name": "Modèle mémoire",
                "verbose_name_plural": "Modèles mémoire",
            },
        ),
        migrations.CreateModel(
            name="TestOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "numero_commande",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Numéro de commande"
                    ),
                ),
                (
                    "date_commande",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de commande"
                    ),
                ),
                (
                    "statut_commande",
                    models.CharField(
                        choices=[
                            ("EN_ATTENTE", "En attente"),
                            ("CONFIRMEE", "Confirmée"),
                            ("EXPEDIEE", "Expédiée"),
                            ("LIVREE", "Livrée"),
                            ("ANNULEE", "Annulée"),
                        ],
                        default="EN_ATTENTE",
                        max_length=20,
                        verbose_name="Statut de la commande",
                    ),
                ),
                (
                    "client_commande",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="commandes_client",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Client de la commande",
                    ),
                ),
            ],
            options={
                "verbose_name": "Commande",
                "verbose_name_plural": "Commandes",
            },
        ),
        migrations.CreateModel(
            name="TestPerformanceModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="Nom du test de performance"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description du test"),
                ),
                (
                    "execution_time",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Temps d'exécution (ms)"
                    ),
                ),
                (
                    "memory_usage",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Utilisation mémoire (bytes)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
            ],
            options={
                "verbose_name": "Test de performance",
                "verbose_name_plural": "Tests de performance",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TestProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_projet",
                    models.CharField(max_length=200, verbose_name="Nom du projet"),
                ),
                (
                    "description_projet",
                    models.TextField(verbose_name="Description du projet"),
                ),
                ("date_debut", models.DateField(verbose_name="Date de début")),
                (
                    "date_fin_prevue",
                    models.DateField(verbose_name="Date de fin prévue"),
                ),
                (
                    "date_fin_reelle",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de fin réelle"
                    ),
                ),
                (
                    "budget_projet",
                    models.DecimalField(
                        decimal_places=2, max_digits=12, verbose_name="Budget du projet"
                    ),
                ),
                (
                    "statut_projet",
                    models.CharField(
                        choices=[
                            ("PLANIFIE", "Planifié"),
                            ("EN_COURS", "En cours"),
                            ("SUSPENDU", "Suspendu"),
                            ("TERMINE", "Terminé"),
                            ("ANNULE", "Annulé"),
                        ],
                        default="PLANIFIE",
                        max_length=20,
                        verbose_name="Statut du projet",
                    ),
                ),
                (
                    "chef_projet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projets_diriges",
                        to="tests.testemployee",
                        verbose_name="Chef de projet",
                    ),
                ),
                (
                    "entreprise_projet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projets_entreprise",
                        to="tests.testcompany",
                        verbose_name="Entreprise du projet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Projet",
                "verbose_name_plural": "Projets",
                "ordering": ["-date_debut"],
            },
        ),
        migrations.CreateModel(
            name="TestSecurityModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("sql_injection", "Injection SQL"),
                            ("xss", "Cross-Site Scripting"),
                            ("csrf", "Cross-Site Request Forgery"),
                            ("auth", "Authentification"),
                            ("authz", "Autorisation"),
                        ],
                        max_length=50,
                        verbose_name="Type de test de sécurité",
                    ),
                ),
                ("payload", models.TextField(verbose_name="Charge utile du test")),
                (
                    "expected_result",
                    models.CharField(
                        choices=[
                            ("blocked", "Bloqué"),
                            ("allowed", "Autorisé"),
                            ("error", "Erreur"),
                        ],
                        max_length=20,
                        verbose_name="Résultat attendu",
                    ),
                ),
                (
                    "actual_result",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("blocked", "Bloqué"),
                            ("allowed", "Autorisé"),
                            ("error", "Erreur"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Résultat réel",
                    ),
                ),
                (
                    "is_vulnerable",
                    models.BooleanField(default=False, verbose_name="Vulnérable"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
            ],
            options={
                "verbose_name": "Test de sécurité",
                "verbose_name_plural": "Tests de sécurité",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TestSharedResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_ressource",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nom de la ressource"
                    ),
                ),
                (
                    "valeur_partagee",
                    models.IntegerField(default=0, verbose_name="Valeur partagée"),
                ),
                (
                    "nombre_acces",
                    models.IntegerField(default=0, verbose_name="Nombre d'accès"),
                ),
                (
                    "derniere_modification",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Dernière modification"
                    ),
                ),
            ],
            options={
                "verbose_name": "Ressource partagée",
                "verbose_name_plural": "Ressources partagées",
            },
        ),
        migrations.CreateModel(
            name="TestTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_tag",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Nom du tag"
                    ),
                ),
                (
                    "description_tag",
                    models.TextField(blank=True, verbose_name="Description du tag"),
                ),
                (
                    "couleur_tag",
                    models.CharField(
                        default="#000000", max_length=7, verbose_name="Couleur du tag"
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
            },
        ),
        migrations.CreateModel(
            name="TestUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_utilisateur",
                    models.CharField(
                        help_text="Nom unique de l'utilisateur",
                        max_length=150,
                        unique=True,
                        verbose_name="Nom d'utilisateur",
                    ),
                ),
                (
                    "adresse_email",
                    models.EmailField(
                        help_text="Adresse e-mail de l'utilisateur",
                        max_length=254,
                        verbose_name="Adresse e-mail",
                    ),
                ),
                (
                    "mot_de_passe",
                    models.CharField(max_length=128, verbose_name="Mot de passe"),
                ),
                (
                    "date_inscription",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date d'inscription"
                    ),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Est actif"),
                ),
                (
                    "age_utilisateur",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Âge de l'utilisateur"
                    ),
                ),
                (
                    "score_reputation",
                    models.FloatField(default=0.0, verbose_name="Score de réputation"),
                ),
            ],
            options={
                "verbose_name": "Utilisateur",
                "verbose_name_plural": "Utilisateurs",
            },
        ),
        migrations.CreateModel(
            name="TestUserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "test_role",
                    models.CharField(
                        choices=[
                            ("admin", "Administrateur"),
                            ("user", "Utilisateur"),
                            ("guest", "Invité"),
                            ("tester", "Testeur"),
                        ],
                        default="user",
                        max_length=50,
                        verbose_name="Rôle de test",
                    ),
                ),
                (
                    "permissions",
                    models.TextField(default="{}", verbose_name="Permissions de test"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Profil utilisateur de test",
                "verbose_name_plural": "Profils utilisateur de test",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TestTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "numero_transaction",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Numéro de transaction"
                    ),
                ),
                (
                    "type_transaction",
                    models.CharField(
                        choices=[
                            ("DEPOT", "Dépôt"),
                            ("RETRAIT", "Retrait"),
                            ("VIREMENT", "Virement"),
                            ("PRELEVEMENT", "Prélèvement"),
                            ("FRAIS", "Frais"),
                        ],
                        max_length=20,
                        verbose_name="Type de transaction",
                    ),
                ),
                (
                    "montant_transaction",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        verbose_name="Montant de la transaction",
                    ),
                ),
                (
                    "description_transaction",
                    models.TextField(
                        blank=True, verbose_name="Description de la transaction"
                    ),
                ),
                (
                    "date_transaction",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de transaction"
                    ),
                ),
                (
                    "statut_transaction",
                    models.CharField(
                        choices=[
                            ("EN_ATTENTE", "En attente"),
                            ("VALIDEE", "Validée"),
                            ("REJETEE", "Rejetée"),
                            ("ANNULEE", "Annulée"),
                        ],
                        default="EN_ATTENTE",
                        max_length=20,
                        verbose_name="Statut de la transaction",
                    ),
                ),
                (
                    "compte_destination",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions_entrantes",
                        to="tests.testaccount",
                        verbose_name="Compte destination",
                    ),
                ),
                (
                    "compte_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions_sortantes",
                        to="tests.testaccount",
                        verbose_name="Compte source",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transaction",
                "verbose_name_plural": "Transactions",
                "ordering": ["-date_transaction"],
            },
        ),
        migrations.CreateModel(
            name="TestSkillCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_categorie",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nom de la catégorie"
                    ),
                ),
                (
                    "description_categorie",
                    models.TextField(
                        blank=True, verbose_name="Description de la catégorie"
                    ),
                ),
                (
                    "parent_categorie",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sous_categories",
                        to="tests.testskillcategory",
                        verbose_name="Catégorie parente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Catégorie de compétence",
                "verbose_name_plural": "Catégories de compétences",
            },
        ),
        migrations.CreateModel(
            name="TestSkill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_competence",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nom de la compétence"
                    ),
                ),
                (
                    "description_competence",
                    models.TextField(
                        blank=True, verbose_name="Description de la compétence"
                    ),
                ),
                (
                    "niveau_requis",
                    models.CharField(
                        choices=[
                            ("DEBUTANT", "Débutant"),
                            ("INTERMEDIAIRE", "Intermédiaire"),
                            ("AVANCE", "Avancé"),
                            ("EXPERT", "Expert"),
                        ],
                        default="DEBUTANT",
                        max_length=20,
                        verbose_name="Niveau requis",
                    ),
                ),
                (
                    "categorie_competence",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="competences_categorie",
                        to="tests.testskillcategory",
                        verbose_name="Catégorie de la compétence",
                    ),
                ),
            ],
            options={
                "verbose_name": "Compétence",
                "verbose_name_plural": "Compétences",
                "ordering": ["nom_competence"],
            },
        ),
        migrations.CreateModel(
            name="TestRelatedModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_relation",
                    models.CharField(max_length=100, verbose_name="Nom de la relation"),
                ),
                (
                    "donnees_relation",
                    models.TextField(verbose_name="Données de la relation"),
                ),
                (
                    "modele_parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modeles_lies",
                        to="tests.testmemorymodel",
                        verbose_name="Modèle parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Modèle lié",
                "verbose_name_plural": "Modèles liés",
            },
        ),
        migrations.CreateModel(
            name="TestProjectAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role_affectation",
                    models.CharField(
                        max_length=100, verbose_name="Rôle dans l'affectation"
                    ),
                ),
                (
                    "pourcentage_temps",
                    models.PositiveIntegerField(
                        default=100, verbose_name="Pourcentage de temps"
                    ),
                ),
                (
                    "date_debut_affectation",
                    models.DateField(verbose_name="Date de début d'affectation"),
                ),
                (
                    "date_fin_affectation",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de fin d'affectation"
                    ),
                ),
                (
                    "employe_affectation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affectations_employe",
                        to="tests.testemployee",
                        verbose_name="Employé de l'affectation",
                    ),
                ),
                (
                    "projet_affectation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affectations_projet",
                        to="tests.testproject",
                        verbose_name="Projet de l'affectation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Affectation de projet",
                "verbose_name_plural": "Affectations de projets",
            },
        ),
        migrations.AddField(
            model_name="testproject",
            name="equipe_projet",
            field=models.ManyToManyField(
                related_name="projets_equipe",
                through="tests.TestProjectAssignment",
                to="tests.testemployee",
                verbose_name="Équipe du projet",
            ),
        ),
        migrations.CreateModel(
            name="TestProductCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_categorie",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nom de la catégorie"
                    ),
                ),
                (
                    "description_categorie",
                    models.TextField(
                        blank=True, verbose_name="Description de la catégorie"
                    ),
                ),
                (
                    "parent_categorie",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sous_categories",
                        to="tests.testproductcategory",
                        verbose_name="Catégorie parente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Catégorie de produit",
                "verbose_name_plural": "Catégories de produits",
            },
        ),
        migrations.CreateModel(
            name="TestProduct",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_produit",
                    models.CharField(
                        help_text="Nom unique du produit",
                        max_length=200,
                        unique=True,
                        verbose_name="Nom du produit",
                    ),
                ),
                (
                    "description_produit",
                    models.TextField(blank=True, verbose_name="Description du produit"),
                ),
                (
                    "prix_produit",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Prix du produit"
                    ),
                ),
                (
                    "quantite_stock",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Quantité en stock"
                    ),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Est actif"),
                ),
                (
                    "date_creation",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "date_modification",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "categorie_produit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="produits_categorie",
                        to="tests.testproductcategory",
                        verbose_name="Catégorie du produit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Produit",
                "verbose_name_plural": "Produits",
                "ordering": ["nom_produit"],
            },
        ),
        migrations.CreateModel(
            name="TestPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "titre_article",
                    models.CharField(max_length=200, verbose_name="Titre de l'article"),
                ),
                (
                    "contenu_article",
                    models.TextField(verbose_name="Contenu de l'article"),
                ),
                (
                    "date_creation",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "date_modification",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "est_publie",
                    models.BooleanField(default=False, verbose_name="Est publié"),
                ),
                (
                    "nombre_vues",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de vues"
                    ),
                ),
                (
                    "auteur_article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="articles_publies",
                        to="tests.testuser",
                        verbose_name="Auteur de l'article",
                    ),
                ),
                (
                    "tags_associes",
                    models.ManyToManyField(
                        blank=True,
                        related_name="articles_associes",
                        to="tests.testtag",
                        verbose_name="Tags associés",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article",
                "verbose_name_plural": "Articles",
            },
        ),
        migrations.CreateModel(
            name="TestOrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantite_item",
                    models.PositiveIntegerField(verbose_name="Quantité de l'item"),
                ),
                (
                    "prix_unitaire",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Prix unitaire"
                    ),
                ),
                (
                    "commande_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items_commande",
                        to="tests.testorder",
                        verbose_name="Commande de l'item",
                    ),
                ),
                (
                    "produit_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tests.testproduct",
                        verbose_name="Produit de l'item",
                    ),
                ),
            ],
            options={
                "verbose_name": "Item de commande",
                "verbose_name_plural": "Items de commande",
            },
        ),
        migrations.AddField(
            model_name="testorder",
            name="produits_commande",
            field=models.ManyToManyField(
                through="tests.TestOrderItem",
                to="tests.testproduct",
                verbose_name="Produits de la commande",
            ),
        ),
        migrations.CreateModel(
            name="TestMediaModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titre")),
                (
                    "image",
                    models.ImageField(upload_to="test_media/", verbose_name="Image"),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        upload_to="test_thumbnails/",
                        verbose_name="Miniature",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Propriétaire",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestLogEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "test_name",
                    models.CharField(max_length=200, verbose_name="Nom du test"),
                ),
                (
                    "test_type",
                    models.CharField(max_length=50, verbose_name="Type de test"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("passed", "Réussi"),
                            ("failed", "Échoué"),
                            ("skipped", "Ignoré"),
                            ("error", "Erreur"),
                        ],
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "duration",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Durée (secondes)"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Message d'erreur"),
                ),
                (
                    "traceback",
                    models.TextField(blank=True, verbose_name="Trace d'erreur"),
                ),
                (
                    "metadata",
                    models.TextField(default="{}", verbose_name="Métadonnées"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
            ],
            options={
                "verbose_name": "Entrée de log de test",
                "verbose_name_plural": "Entrées de log de test",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["test_name", "status"],
                        name="tests_testl_test_na_935d7b_idx",
                    ),
                    models.Index(
                        fields=["test_type", "created_at"],
                        name="tests_testl_test_ty_1afc34_idx",
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="testemployee",
            name="competences_employe",
            field=models.ManyToManyField(
                blank=True,
                related_name="employes_competences",
                to="tests.testskill",
                verbose_name="Compétences de l'employé",
            ),
        ),
        migrations.AddField(
            model_name="testemployee",
            name="entreprise_employe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="employes_entreprise",
                to="tests.testcompany",
                verbose_name="Entreprise de l'employé",
            ),
        ),
        migrations.AddField(
            model_name="testemployee",
            name="manager_employe",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="equipe_manager",
                to="tests.testemployee",
                verbose_name="Manager de l'employé",
            ),
        ),
        migrations.AddField(
            model_name="testemployee",
            name="utilisateur_employe",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="profil_employe",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Utilisateur employé",
            ),
        ),
        migrations.CreateModel(
            name="TestCustomer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_client",
                    models.CharField(max_length=100, verbose_name="Nom du client"),
                ),
                (
                    "prenom_client",
                    models.CharField(max_length=100, verbose_name="Prénom du client"),
                ),
                (
                    "email_client",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="E-mail du client"
                    ),
                ),
                (
                    "telephone_client",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Téléphone du client"
                    ),
                ),
                (
                    "date_naissance",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de naissance"
                    ),
                ),
                (
                    "adresse_client",
                    models.TextField(blank=True, verbose_name="Adresse du client"),
                ),
                (
                    "ville_client",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Ville du client"
                    ),
                ),
                (
                    "code_postal",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="Code postal"
                    ),
                ),
                (
                    "pays_client",
                    models.CharField(
                        default="France", max_length=50, verbose_name="Pays du client"
                    ),
                ),
                (
                    "est_actif",
                    models.BooleanField(default=True, verbose_name="Est actif"),
                ),
                (
                    "date_creation",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "date_modification",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "solde_compte",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=10,
                        verbose_name="Solde du compte",
                    ),
                ),
            ],
            options={
                "verbose_name": "Client",
                "verbose_name_plural": "Clients",
                "ordering": ["nom_client", "prenom_client"],
                "indexes": [
                    models.Index(
                        fields=["email_client"], name="tests_testc_email_c_542851_idx"
                    ),
                    models.Index(
                        fields=["nom_client", "prenom_client"],
                        name="tests_testc_nom_cli_9ca74e_idx",
                    ),
                    models.Index(
                        fields=["ville_client"], name="tests_testc_ville_c_dff678_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="testaccount",
            name="client_compte",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comptes_client",
                to="tests.testcustomer",
                verbose_name="Client du compte",
            ),
        ),
        migrations.CreateModel(
            name="PerformanceTestReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.IntegerField(verbose_name="Note")),
                ("comment", models.TextField(verbose_name="Commentaire")),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tests.performancetestbook",
                        verbose_name="Livre",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Critique",
                    ),
                ),
            ],
            options={
                "verbose_name": "Avis de test (performance)",
                "verbose_name_plural": "Avis de test (performance)",
            },
        ),
        migrations.CreateModel(
            name="FixtureTestReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "reviewer_name",
                    models.CharField(max_length=100, verbose_name="Nom du critique"),
                ),
                (
                    "reviewer_email",
                    models.EmailField(
                        max_length=254, verbose_name="E-mail du critique"
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        verbose_name="Note",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="Titre de l'avis"),
                ),
                ("content", models.TextField(verbose_name="Contenu de l'avis")),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Vérifié"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=True, verbose_name="Publié"),
                ),
                (
                    "helpful_votes",
                    models.PositiveIntegerField(default=0, verbose_name="Votes utiles"),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="tests.fixturetestbook",
                        verbose_name="Livre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Avis de test (fixture)",
                "verbose_name_plural": "Avis de test (fixtures)",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FixtureTestCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nom de la catégorie"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Ordre de tri"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="tests.fixturetestcategory",
                        verbose_name="Catégorie parente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Catégorie de test (fixture)",
                "verbose_name_plural": "Catégories de test (fixtures)",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.AddField(
            model_name="fixturetestbook",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="books",
                to="tests.fixturetestcategory",
                verbose_name="Catégorie",
            ),
        ),
        migrations.AddField(
            model_name="fixturetestbook",
            name="publisher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="books",
                to="tests.fixturetestpublisher",
                verbose_name="Éditeur",
            ),
        ),
        migrations.CreateModel(
            name="BenchmarkTestReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_revieweur",
                    models.CharField(max_length=100, verbose_name="Nom du revieweur"),
                ),
                (
                    "email_revieweur",
                    models.EmailField(
                        max_length=254, verbose_name="E-mail du revieweur"
                    ),
                ),
                (
                    "note_avis",
                    models.IntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        verbose_name="Note de l'avis",
                    ),
                ),
                (
                    "commentaire_avis",
                    models.TextField(verbose_name="Commentaire de l'avis"),
                ),
                (
                    "date_avis",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de l'avis"
                    ),
                ),
                (
                    "est_verifie",
                    models.BooleanField(default=False, verbose_name="Est vérifié"),
                ),
                (
                    "livre_avis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avis_livre",
                        to="tests.benchmarktestbook",
                        verbose_name="Livre de l'avis",
                    ),
                ),
            ],
            options={
                "verbose_name": "Avis",
                "verbose_name_plural": "Avis",
                "ordering": ["-date_avis"],
            },
        ),
        migrations.AddIndex(
            model_name="benchmarktestauthor",
            index=models.Index(
                fields=["email_auteur"], name="tests_bench_email_a_f73ec5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="benchmarktestauthor",
            index=models.Index(
                fields=["nom_auteur", "prenom_auteur"],
                name="tests_bench_nom_aut_2fbdd0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="testtransaction",
            index=models.Index(
                fields=["numero_transaction"], name="tests_testt_numero__53ec2c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testtransaction",
            index=models.Index(
                fields=["compte_source", "date_transaction"],
                name="tests_testt_compte__842ff1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="testtransaction",
            index=models.Index(
                fields=["type_transaction", "statut_transaction"],
                name="tests_testt_type_tr_2909d8_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="testprojectassignment",
            unique_together={("projet_affectation", "employe_affectation")},
        ),
        migrations.AlterUniqueTogether(
            name="testorderitem",
            unique_together={("commande_item", "produit_item")},
        ),
        migrations.AlterUniqueTogether(
            name="testemployee",
            unique_together={("utilisateur_employe", "entreprise_employe")},
        ),
        migrations.AddIndex(
            model_name="testaccount",
            index=models.Index(
                fields=["numero_compte"], name="tests_testa_numero__e74188_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testaccount",
            index=models.Index(
                fields=["client_compte", "type_compte"],
                name="tests_testa_client__279511_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="fixturetestreview",
            unique_together={("book", "reviewer_email")},
        ),
        migrations.AddIndex(
            model_name="benchmarktestreview",
            index=models.Index(
                fields=["livre_avis", "date_avis"],
                name="tests_bench_livre_a_87470e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="benchmarktestreview",
            index=models.Index(
                fields=["note_avis"], name="tests_bench_note_av_0f387b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="benchmarktestreview",
            index=models.Index(
                fields=["est_verifie"], name="tests_bench_est_ver_a9b52a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="benchmarktestbook",
            index=models.Index(
                fields=["isbn_livre"], name="tests_bench_isbn_li_40c819_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="benchmarktestbook",
            index=models.Index(
                fields=["auteur_livre", "date_publication"],
                name="tests_bench_auteur__5e0248_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="benchmarktestbook",
            index=models.Index(
                fields=["genre_livre"], name="tests_bench_genre_l_1f11a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="benchmarktestbook",
            index=models.Index(
                fields=["est_disponible"], name="tests_bench_est_dis_b2320d_idx"
            ),
        ),
    ]

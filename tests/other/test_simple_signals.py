#!/usr/bin/env python3
"""
Test simple pour v√©rifier l'invalidation du cache via les signaux Django
Ce test se concentre sur les op√©rations directes sur les mod√®les
"""

import os
import sys
import django
import time
from datetime import datetime

# Configuration Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "rail_django_graphql.settings")
django.setup()

from django.core.cache import cache
from django.db import transaction
from test_app.models import Category, Tag


def log_test_step(step_name, details=""):
    """Log une √©tape de test avec timestamp"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"\n[{timestamp}] üß™ {step_name}")
    if details:
        print(f"   üìù {details}")


def test_cache_invalidation_on_model_operations():
    """Test l'invalidation du cache lors d'op√©rations sur les mod√®les"""
    log_test_step("Test d'invalidation du cache avec signaux Django")

    # 1. Effacer le cache et ajouter une cl√© de test
    cache.clear()
    test_key = "test_cache_key"
    test_value = "test_value_initial"
    cache.set(test_key, test_value, 300)  # 5 minutes

    # V√©rifier que la cl√© est en cache
    cached_value = cache.get(test_key)
    print(f"   üìä Valeur initiale en cache: {cached_value}")

    if cached_value != test_value:
        print("   ‚ùå Erreur: la valeur n'a pas √©t√© mise en cache correctement")
        return False

    # 2. Cr√©er une cat√©gorie (doit d√©clencher l'invalidation)
    log_test_step("Cr√©ation d'une cat√©gorie pour d√©clencher l'invalidation")

    with transaction.atomic():
        new_category = Category.objects.create(
            name=f"Test Signal Category {datetime.now().strftime('%H%M%S')}",
            description="Test d'invalidation par signal",
        )
        print(f"   ‚úÖ Cat√©gorie cr√©√©e: {new_category.name} (ID: {new_category.id})")

    # 3. Attendre un peu pour que les signaux se d√©clenchent
    time.sleep(0.5)

    # 4. V√©rifier que le cache a √©t√© invalid√©
    log_test_step("V√©rification de l'invalidation du cache")
    cached_value_after = cache.get(test_key)
    print(f"   üìä Valeur apr√®s cr√©ation: {cached_value_after}")

    if cached_value_after is None:
        print("   ‚úÖ Cache invalid√© correctement - cl√© supprim√©e")
        cache_invalidated_create = True
    else:
        print("   ‚ùå Cache non invalid√© - cl√© toujours pr√©sente")
        cache_invalidated_create = False

    # 5. Remettre une valeur en cache et tester la modification
    cache.set(test_key, "test_value_after_create", 300)

    log_test_step("Modification de la cat√©gorie")
    new_category.description = f"Modifi√©e √† {datetime.now().strftime('%H:%M:%S')}"
    new_category.save()
    print(f"   ‚úÖ Cat√©gorie modifi√©e")

    time.sleep(0.5)

    cached_value_after_update = cache.get(test_key)
    print(f"   üìä Valeur apr√®s modification: {cached_value_after_update}")

    if cached_value_after_update is None:
        print("   ‚úÖ Cache invalid√© correctement apr√®s modification")
        cache_invalidated_update = True
    else:
        print("   ‚ùå Cache non invalid√© apr√®s modification")
        cache_invalidated_update = False

    # 6. Remettre une valeur en cache et tester la suppression
    cache.set(test_key, "test_value_after_update", 300)

    log_test_step("Suppression de la cat√©gorie")
    category_id = new_category.id
    new_category.delete()
    print(f"   ‚úÖ Cat√©gorie supprim√©e (ID: {category_id})")

    time.sleep(0.5)

    cached_value_after_delete = cache.get(test_key)
    print(f"   üìä Valeur apr√®s suppression: {cached_value_after_delete}")

    if cached_value_after_delete is None:
        print("   ‚úÖ Cache invalid√© correctement apr√®s suppression")
        cache_invalidated_delete = True
    else:
        print("   ‚ùå Cache non invalid√© apr√®s suppression")
        cache_invalidated_delete = False

    return (
        cache_invalidated_create
        and cache_invalidated_update
        and cache_invalidated_delete
    )


def test_bulk_operations():
    """Test l'invalidation du cache avec les op√©rations en lot"""
    log_test_step("Test des op√©rations en lot")

    # Mettre une valeur en cache
    test_key = "bulk_test_key"
    cache.set(test_key, "bulk_test_value", 300)

    # Cr√©er plusieurs cat√©gories en lot
    categories_to_create = [
        Category(name=f"Bulk Category {i}", description=f"Cat√©gorie en lot {i}")
        for i in range(3)
    ]

    with transaction.atomic():
        Category.objects.bulk_create(categories_to_create)
        print(f"   ‚úÖ {len(categories_to_create)} cat√©gories cr√©√©es en lot")

    time.sleep(0.5)

    # V√©rifier l'invalidation
    cached_value = cache.get(test_key)
    print(f"   üìä Valeur apr√®s cr√©ation en lot: {cached_value}")

    # Nettoyer
    Category.objects.filter(name__startswith="Bulk Category").delete()

    if cached_value is None:
        print("   ‚úÖ Cache invalid√© correctement pour les op√©rations en lot")
        return True
    else:
        print("   ‚ùå Cache non invalid√© pour les op√©rations en lot")
        return False


def test_different_models():
    """Test l'invalidation avec diff√©rents mod√®les"""
    log_test_step("Test avec diff√©rents mod√®les")

    # Test avec Tag
    test_key = "tag_test_key"
    cache.set(test_key, "tag_test_value", 300)

    tag = Tag.objects.create(name=f"Test Tag {datetime.now().strftime('%H%M%S')}")
    print(f"   ‚úÖ Tag cr√©√©: {tag.name}")

    time.sleep(0.5)

    cached_value = cache.get(test_key)
    print(f"   üìä Valeur apr√®s cr√©ation de tag: {cached_value}")

    # Nettoyer
    tag.delete()

    if cached_value is None:
        print("   ‚úÖ Cache invalid√© correctement pour Tag")
        return True
    else:
        print("   ‚ùå Cache non invalid√© pour Tag")
        return False


def run_simple_test():
    """Lance tous les tests simples"""
    print("üöÄ D√âBUT DES TESTS SIMPLES D'INVALIDATION DU CACHE VIA SIGNAUX")
    print("=" * 80)

    # Tests
    results = []

    try:
        # Test 1: Op√©rations CRUD de base
        results.append(
            ("Op√©rations CRUD", test_cache_invalidation_on_model_operations())
        )

        # Test 2: Op√©rations en lot
        results.append(("Op√©rations en lot", test_bulk_operations()))

        # Test 3: Diff√©rents mod√®les
        results.append(("Diff√©rents mod√®les", test_different_models()))

    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback

        traceback.print_exc()
        return False

    # R√©sum√© des r√©sultats
    print("\n" + "=" * 80)
    print("üìä R√âSUM√â DES TESTS SIMPLES")
    print("=" * 80)

    all_passed = True
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"   {test_name}: {status}")
        if not result:
            all_passed = False

    print("\n" + "=" * 80)
    if all_passed:
        print("üéâ TOUS LES TESTS SIMPLES SONT R√âUSSIS!")
        print("‚úÖ Le middleware avec signaux Django fonctionne correctement")
        print("‚úÖ Toutes les op√©rations CRUD d√©clenchent l'invalidation du cache")
    else:
        print("‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("‚ùå V√©rifiez la configuration du middleware et des signaux")

    print("=" * 80)
    return all_passed


if __name__ == "__main__":
    success = run_simple_test()
    sys.exit(0 if success else 1)

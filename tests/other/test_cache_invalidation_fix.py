#!/usr/bin/env python3
"""
Script pour tester la correction de l'invalidation du cache GraphQL.
Ce script v√©rifie que les nouvelles mutations invalident correctement le cache.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_graphql_auto.settings')
django.setup()

from django.core.cache import cache
from test_app.models import Tag
from test_app.schema import CreateTag, TagInput, invalidate_tag_cache
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_cache_invalidation_fix():
    """Tester la correction de l'invalidation du cache."""
    print("\n" + "="*70)
    print("üß™ TEST DE LA CORRECTION D'INVALIDATION DU CACHE")
    print("="*70)
    
    # Nettoyer le cache initial
    cache.clear()
    print("üßπ Cache initial nettoy√©")
    
    # Test 1: Simuler un cache existant
    print("\nüìã Test 1: Simulation d'un cache existant")
    cache.set("graphql_all_tags", ["tag1", "tag2", "tag3"], 300)
    cache.set("gql_query_tags", {"data": "cached_tags"}, 300)
    cache.set("model_page_tags", {"page": 1, "tags": []}, 300)
    
    cached_data = cache.get("graphql_all_tags")
    print(f"‚úÖ Cache simul√© cr√©√©: {cached_data}")
    
    # Test 2: Cr√©er un tag avec la mutation corrig√©e
    print("\nüìã Test 2: Cr√©ation d'un tag avec invalidation automatique")
    try:
        # Simuler les arguments de la mutation
        class MockInput:
            def __init__(self, **kwargs):
                for key, value in kwargs.items():
                    setattr(self, key, value)
        
        mock_input = MockInput(name="TestCacheInvalidation", color="#FF6B6B")
        
        # Ex√©cuter la mutation
        mutation = CreateTag()
        result = mutation.mutate(None, None, input=mock_input)
        
        if result and result.tag:
            print(f"‚úÖ Tag cr√©√© avec succ√®s: {result.tag.name} (ID: {result.tag.pk})")
            
            # Test 3: V√©rifier que le cache a √©t√© invalid√©
            print("\nüìã Test 3: V√©rification de l'invalidation du cache")
            cached_data_after = cache.get("graphql_all_tags")
            
            if cached_data_after is None:
                print("‚úÖ Cache correctement invalid√© - graphql_all_tags")
            else:
                print(f"‚ùå Cache toujours pr√©sent: {cached_data_after}")
            
            # V√©rifier d'autres cl√©s de cache
            other_caches = [
                "gql_query_tags",
                "model_page_tags",
                f"graphql_tags_by_color_{result.tag.color}",
                f"tag_model_{result.tag.pk}"
            ]
            
            invalidated_count = 0
            for cache_key in other_caches:
                if cache.get(cache_key) is None:
                    print(f"‚úÖ Cache invalid√©: {cache_key}")
                    invalidated_count += 1
                else:
                    print(f"‚ö†Ô∏è  Cache encore pr√©sent: {cache_key}")
            
            print(f"\nüìä R√©sultat: {invalidated_count}/{len(other_caches)} caches invalid√©s")
            
        else:
            print("‚ùå Erreur lors de la cr√©ation du tag")
            
    except Exception as e:
        print(f"‚ùå Exception lors du test: {e}")
        import traceback
        traceback.print_exc()
    
    # Test 4: Test de la fonction helper directement
    print("\nüìã Test 4: Test de la fonction helper d'invalidation")
    try:
        # Remettre du cache
        cache.set("graphql_all_tags", ["test_data"], 300)
        cache.set("gql_query_tags", {"test": "data"}, 300)
        
        # Cr√©er un tag de test
        test_tag = Tag.objects.create(name="TestHelper", color="#00FF00")
        
        # Appeler la fonction helper
        invalidate_tag_cache(test_tag)
        
        # V√©rifier l'invalidation
        if cache.get("graphql_all_tags") is None:
            print("‚úÖ Fonction helper fonctionne correctement")
        else:
            print("‚ùå Fonction helper n'a pas invalid√© le cache")
            
        # Nettoyer le tag de test
        test_tag.delete()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de la fonction helper: {e}")
    
    # Test 5: V√©rifier le comportement avant/apr√®s
    print("\nüìã Test 5: Comparaison avant/apr√®s correction")
    
    # Simuler l'ancien comportement (sans invalidation)
    cache.set("graphql_all_tags", ["old_cached_data"], 300)
    print("üì¶ Cache simul√© (ancien comportement)")
    
    # Cr√©er un tag avec invalidation
    try:
        test_tag2 = Tag.objects.create(name="TestComparison", color="#0066FF")
        invalidate_tag_cache(test_tag2)
        
        if cache.get("graphql_all_tags") is None:
            print("‚úÖ CORRECTION R√âUSSIE: Le cache est maintenant invalid√© automatiquement")
        else:
            print("‚ùå PROBL√àME: Le cache n'est toujours pas invalid√©")
        
        # Nettoyer
        test_tag2.delete()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de comparaison: {e}")
    
    print("\nüéØ CONCLUSION:")
    print("="*70)
    print("‚úÖ La mutation CreateTag a √©t√© mise √† jour avec l'invalidation du cache")
    print("‚úÖ Une fonction helper invalidate_tag_cache() a √©t√© ajout√©e")
    print("‚úÖ Les imports n√©cessaires ont √©t√© ajout√©s")
    print("\nüöÄ PROCHAINES √âTAPES:")
    print("1. Red√©marrer le serveur Django")
    print("2. Tester dans GraphiQL:")
    print("   - Cr√©er un tag avec createTag")
    print("   - Ex√©cuter une requ√™te tags imm√©diatement apr√®s")
    print("   - V√©rifier que le nouveau tag appara√Æt sans rafra√Æchissement")
    print("3. Surveiller les logs pour voir les messages d'invalidation")

if __name__ == "__main__":
    test_cache_invalidation_fix()
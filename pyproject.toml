[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rail-django-graphql"
version = "1.0.2"
description = "A powerful Django library for automatic GraphQL API generation with advanced features"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Rail Django GraphQL Contributors", email = "contributors@rail-django-graphql.com"}
]
maintainers = [
    {name = "Rail Django GraphQL Contributors", email = "contributors@rail-django-graphql.com"}
]
keywords = [
    "django",
    "graphql",
    "api",
    "graphene",
    "schema",
    "generator",
    "rail",
    "automation"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "Django>=4.2,<6.0",
    "graphene-django>=3.0.0,<4.0.0",
    "graphene>=3.0.0,<4.0.0",
    "django-filter>=23.0,<25.0",
    "django-cors-headers>=4.0.0,<5.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "factory-boy>=3.2.0",
    "tox>=4.0.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.0",
    "flake8-bugbear>=23.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    
    # Pre-commit
    "pre-commit>=3.0.0",
    
    # Documentation
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.20.0",
    
    # Development tools
    "ipython>=8.0.0",
    "ipdb>=0.13.0",
]
performance = [
    "redis>=4.0.0",
    "django-redis>=5.2.0",
    "celery>=5.2.0",
]
postgres = [
    "psycopg2-binary>=2.9.0",
]
full = [
    "rail-django-graphql[dev,performance,postgres]",
]

[project.urls]
Homepage = "https://github.com/raillogistic/rail-django-graphql"
Documentation = "https://rail-django-graphql.readthedocs.io/"
Repository = "https://github.com/raillogistic/rail-django-graphql.git"
"Bug Tracker" = "https://github.com/raillogistic/rail-django-graphql/issues"
Changelog = "https://github.com/raillogistic/rail-django-graphql/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["rail_django_graphql"]
include-package-data = true

[tool.setuptools.package-data]
rail_django_graphql = [
    "templates/**/*",
    "static/**/*",
    "management/commands/*",
]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "test_app.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = "--cov=rail_django_graphql --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
source = ["rail_django_graphql"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "manage.py",
    "*/settings/*",
    "*/test_app/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]